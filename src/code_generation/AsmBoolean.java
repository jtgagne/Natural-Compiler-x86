package code_generation;

import inter.Stmt;
import lexer.Tag;
import lexer.Token;

/**
 * Class used for organizing various boolean expressions to be generated by the compiler
 * Created by gagnej3 on 11/29/16.
 */
public class AsmBoolean {

    private static String mResultRegister;

    /**
     * Branch if expression is false
     * @param register register containing a boolean 1 or 0
     * @return the formatted String
     */
    public static String genBranchTo(String register){
        Stmt s = Stmt.Enclosing;
        String label = s.getLabelAfter();   //Get the enclosing label of the current statement
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("\tCMP\t %s, %s\t\t; Check if true\n", register, AsmConstants.BOOLEAN_TRUE));
        sb.append(String.format("\tJNE\t %s\n", label));
        return sb.toString();
    }

    public static String genCompare(String register1, String register2){
        String result = String.format("\tCMP\t %s, %s\n", register1, register2);
        mResultRegister = register1;
        RegisterManager.freeRegister(register2);
        return result;
    }

    public static String genRelationalJump(Token relation){
        StringBuilder sb = new StringBuilder();
        Stmt s = Stmt.Enclosing;
        String label = s.getLabelAfter();   //Get the enclosing label of the current statement

        switch (relation.tag){
            case Tag.LESS:
                return String.format("\tJNL\t %s\n", label);

        }
        return "";
    }

    public static String genAndExpr(String register1, String register2) {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("\tAND\t %s, %s\n", register1, register2));
        mResultRegister = register1;
        RegisterManager.freeRegister(register2);
        return sb.toString();
    }


    public static String genOrExpr(String register1, String register2){
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("\tOR\t %s, %s\n", register1, register2));
        mResultRegister = register1;
        RegisterManager.freeRegister(register2);
        return sb.toString();
    }

    public static String genNotExpr(String register1){
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("\tNOT\t %s\t; execute a bitwise not on the register\n", register1));
        mResultRegister = register1;
        return sb.toString();
    }

    public static String getResultRegister(){
        return mResultRegister;
    }
}
